{"version":3,"sources":["../../src/helpers/jwt.js"],"names":["secret","generarJwt","uid","role","Promise","resolve","reject","payload","jwt","sign","expiresIn","err","token","console","log"],"mappings":";;;;;;;AAAA;;;;AAEA,MAAMA,MAAM,GAAG,WAAf;;AACO,MAAMC,UAAU,GAAG,CAACC,GAAD,EAAMC,IAAN,KAAe;AACrC,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,UAAMC,OAAO,GAAG;AACZL,MAAAA,GADY;AAEZC,MAAAA;AAFY,KAAhB;;AAKAK,0BAAIC,IAAJ,CAASF,OAAT,EAAkBP,MAAlB,EAA0B;AAAEU,MAAAA,SAAS,EAAE;AAAb,KAA1B,EACI,CAACC,GAAD,EAAMC,KAAN,KAAgB;AACZ,UAAID,GAAJ,EAAS;AACLE,QAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACAL,QAAAA,MAAM,CAAC,6BAAD,CAAN;AACH;;AAEDD,MAAAA,OAAO,CAACO,KAAD,CAAP;AACH,KARL;AAUH,GAhBM,CAAP;AAiBH,CAlBM","sourcesContent":["import jwt from \"jsonwebtoken\";\r\n\r\nconst secret = \"@mi_llave\";\r\nexport const generarJwt = (uid, role) => {\r\n    return new Promise((resolve, reject) => {\r\n        const payload = {\r\n            uid,\r\n            role\r\n        }\r\n\r\n        jwt.sign(payload, secret, { expiresIn: \"2h\" },\r\n            (err, token) => {\r\n                if (err) {\r\n                    console.log(err)\r\n                    reject(\"No se pudo generar el Token\")\r\n                }\r\n\r\n                resolve(token)\r\n            }\r\n        )\r\n    })\r\n};"],"file":"jwt.js"}