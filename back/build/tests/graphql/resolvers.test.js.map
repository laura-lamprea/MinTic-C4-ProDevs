{"version":3,"sources":["../../../src/tests/graphql/resolvers.test.js"],"names":["dotenv","config","getUsuarios","id","query","variables","context","user","auth","esperado","data","Usuarios","email","id_user","name_user","last_name_user","role","state_user","schema","typeDefs","resolvers","test","result","expect","toEqual"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEAA,gBAAOC,MAAP;;AAGA,MAAMC,WAAW,GAAG;AAChBC,EAAAA,EAAE,EAAE,uCADY;AAEhBC,EAAAA,KAAK,EAAG;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAfoB;AAgBhBC,EAAAA,SAAS,EAAE,EAhBK;AAkBhBC,EAAAA,OAAO,EAAE;AACLC,IAAAA,IAAI,EAAE;AACFC,MAAAA,IAAI,EAAE;AADJ;AADD,GAlBO;AAwBhBC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,IAAI,EAAE;AACFC,MAAAA,QAAQ,EAAE,CACN;AACIR,QAAAA,EAAE,EAAE,0BADR;AAEIS,QAAAA,KAAK,EAAE,0BAFX;AAGIC,QAAAA,OAAO,EAAE,MAHb;AAIIC,QAAAA,SAAS,EAAE,QAJf;AAKIC,QAAAA,cAAc,EAAE,SALpB;AAMIC,QAAAA,IAAI,EAAE,QANV;AAOIC,QAAAA,UAAU,EAAE;AAPhB,OADM;AADR;AADA;AAxBM,CAApB;AAyCA,MAAMC,MAAM,GAAG,kCAAqB;AAACC,EAAAA,QAAQ,EAARA,iBAAD;AAAWC,EAAAA,SAAS,EAATA;AAAX,CAArB,CAAf;AAEA,MAAM;AAAEjB,EAAAA,EAAF;AAAMC,EAAAA,KAAN;AAAaC,EAAAA,SAAb;AAAwBC,EAAAA,OAAxB;AAAiCG,EAAAA;AAAjC,IAA8CP,WAApD;AAEAmB,IAAI,CAAC,qBAAD,EAAyB,YAAY;AAErC,QAAM,2BAAN;AAEA,QAAMC,MAAM,GAAG,MAAM,sBAAQnB,EAAR,EAAYe,MAAZ,EAAoBd,KAApB,EAA2B,IAA3B,EAAiCE,OAAjC,EAA0CD,SAA1C,CAArB;AAEAkB,EAAAA,MAAM,CAACD,MAAD,CAAN,CAAeE,OAAf,CAAuBf,QAAvB;AAEH,CARG,CAAJ","sourcesContent":["import { graphql } from 'graphql';\r\nimport { makeExecutableSchema } from '@graphql-tools/schema';\r\nimport { dbConnection } from \"../../database/config\";\r\nimport { resolvers } from \"../../graphql/resolvers\";\r\nimport { typeDefs } from \"../../graphql/schema\";\r\nimport dotenv from \"dotenv\";\r\n\r\ndotenv.config();\r\n\r\n\r\nconst getUsuarios = {\r\n    id: 'Consultar todos los usuarios de la db',\r\n    query: `\r\n        {\r\n            Usuarios{\r\n            id\r\n            id_user\r\n            name_user\r\n            last_name_user\r\n            email\r\n            password\r\n            role\r\n            state_user\r\n            }\r\n        } \r\n    `,\r\n    variables: {},\r\n\r\n    context: {\r\n        user: {\r\n            auth: true\r\n        }\r\n    },\r\n\r\n    esperado: {\r\n        data: {\r\n            Usuarios: [\r\n                {   \r\n                    id: \"61c10e211123f8c2d1be0b3c\",\r\n                    email: \"laura.lampream@gmail.com\",\r\n                    id_user: \"U001\",\r\n                    name_user: \"Laura \",\r\n                    last_name_user: \"Lamprea\",\r\n                    role: \"Leader\",\r\n                    state_user: \"Authorized\",\r\n                }\r\n            ]\r\n        }\r\n    }\r\n};\r\n\r\nconst schema = makeExecutableSchema({typeDefs, resolvers });\r\n\r\nconst { id, query, variables, context, esperado } = getUsuarios;\r\n\r\ntest('consultar usuarios ',  async () => {\r\n\r\n    await dbConnection();\r\n\r\n    const result = await graphql(id, schema, query, null, context, variables);\r\n\r\n    expect(result).toEqual(esperado);\r\n\r\n})\r\n"],"file":"resolvers.test.js"}