{"version":3,"sources":["../../src/graphql/resolvers.js"],"names":["resolvers","Query","Login","_","email","password","usuario","Usuarios","findOne","console","log","validarPassword","bcryp","compareSync","token","id","role","find","UsuarioByID","findById","Proyectos","populate","proyectoById","Inscripciones","Avances","Mutation","addUser","user","salt","genSaltSync","unUsuario","hashSync","save","updateProfileUser","findByIdAndUpdate","id_user","name_user","state_user","new","updateStateUser","deleteUser","args","findByIdAndDelete","addProject","project","unProyecto","updateProject","general_objectives","specific_objectives","budget","state_project","phase","deleteProject","addInscription","inscription","unaInscripcion","updateStateInscriptions","state_inscription","deleteIncriptions","addProgress","progress","unAvance"],"mappings":"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","sourcesContent":["import bcryp from \"bcrypt\";\r\nimport Proyectos from \"../models/Proyectos\";\r\nimport Usuarios from \"../models/Usuarios\";\r\nimport Avances from \"../models/Avances\";\r\nimport Inscripciones from \"../models/Inscripciones\";\r\nimport { generarJwt } from \"../helpers/jwt\";\r\n\r\nexport const resolvers = {\r\n    Query: {\r\n        async Login(_, { email, password }) {\r\n            const usuario = await Usuarios.findOne({\r\n                email\r\n                \r\n            })\r\n            console.log(usuario)\r\n            if (!usuario) {\r\n                return \"Usuario o contraseña incorrecto\";\r\n            }\r\n            const validarPassword = bcryp.compareSync(password, usuario.password)\r\n            if (validarPassword) {\r\n                const token = await generarJwt(usuario.id, usuario.role)\r\n                console.log(\"Login exitoso\")\r\n                return token;\r\n            }\r\n            else {\r\n                console.log(\"Usuario o contraseña incorrecto\")\r\n                //return \"Usuario o contraseña incorrecto\";\r\n            }\r\n        },\r\n\r\n        Usuarios() {\r\n            \r\n            return Usuarios.find();\r\n            \r\n            },\r\n\r\n        async UsuarioByID(_,{id}){\r\n            return await Usuarios.findById(id);\r\n        },\r\n\r\n        // async Usuarios(_, args, {user}) {\r\n        //     console.log(\"Usuarios\", user)\r\n        //     if (user.auth) {\r\n        //         return await Usuarios.find().populate(\"leader\");\r\n        //     } else {\r\n        //         throw new Error (\"Not authenticate\");\r\n        //     }\r\n        // },\r\n\r\n        Proyectos() {\r\n        return Proyectos.find().populate('leader')\r\n        },\r\n\r\n        async proyectoById(_, {id}) {\r\n            return await Proyectos.findById(id).populate('leader');\r\n        },\r\n\r\n    \r\n\r\n        // async Proyectos(_, args, context) {\r\n        //     const test =await Proyectos.find().populate('leader');\r\n        //     console.log('test', test);\r\n        //     return await Proyectos.find().populate(\"leader\");\r\n        // },\r\n\r\n        // async Proyectos(_, args, context) {\r\n        //     if (context.user.auth) {\r\n        //         return await Proyectos.find().populate(\"leader\");\r\n        //     } else {\r\n        //         return null;\r\n        //     }\r\n\r\n        //     // if (context.user.auth && (context.user.role === \"Admin\")) {\r\n        //     //     return await Proyectos.find().populate(\"leader\");\r\n        //     // } else if (context.user.auth && (context.user.role === \"Leader\")) {\r\n        //     //     return await Proyectos.find({ leader: context.user.id }).populate(\"leader\");\r\n        //     // } else if (context.user.auth && (context.user.role === \"Student\")) {\r\n        //     //     return await Proyectos.find({ state_user: true }).populate(\"leader\");\r\n        //     // } else {\r\n        //     //     return null;\r\n        //     // }\r\n        // },\r\n\r\n        Inscripciones() {\r\n            return Inscripciones.find().populate('id_Dproject')\r\n            },\r\n\r\n        // async Inscripciones(_, args, context) {\r\n        //     if (context.user.auth) {\r\n        //         return await Inscripciones.find().populate('idproject').populate('student');\r\n        //     } else {\r\n        //         return null;\r\n        //     }\r\n        // },\r\n\r\n        //listar\r\n        Avances() {\r\n            return Avances.find().populate('n_project') \r\n            },\r\n\r\n        // async Avances(_, args, context) {\r\n        //     if (context.user.auth) {\r\n        //         return await Avances.find().populate(\"leader\");\r\n        //     } else {\r\n        //         return null;\r\n        //     }\r\n        // },\r\n    },\r\n\r\n\r\n\r\n    Mutation: {\r\n\r\n        /*Mutation Users */\r\n        async addUser(_, { user }) {\r\n            const salt = bcryp.genSaltSync();\r\n            let unUsuario = new Usuarios(user);\r\n            unUsuario.password = bcryp.hashSync(user.password, salt);\r\n            return await unUsuario.save();\r\n        },\r\n        async updateProfileUser(_, { user }) {\r\n            return await Usuarios.findByIdAndUpdate(user.id, {\r\n                id_user: user.id_user,\r\n                name_user: user.name_user,\r\n                email: user.email,\r\n                password: user.password,\r\n                role: user.role,\r\n                state_user: user.state_user\r\n            },\r\n                { new: true });\r\n        },\r\n        async updateStateUser(_, { user }) {\r\n            return await Usuarios.findByIdAndUpdate(user.id, {\r\n                role: user.role,\r\n                state_user: user.state_user\r\n            },\r\n                { new: true });\r\n        },\r\n        async deleteUser(_, args) {\r\n            return await Usuarios.findByIdAndDelete(args.id)\r\n        },\r\n\r\n        /*Mutation Project */\r\n        async addProject(_, { project }) {\r\n            const unProyecto = new Proyectos(project);\r\n            return await unProyecto.save();\r\n        },\r\n        async updateProject(_, { project }) {\r\n            return await Proyectos.findByIdAndUpdate(project.id,\r\n                {\r\n                    project: project.project,\r\n                    general_objectives: project.general_objectives,\r\n                    specific_objectives: project.specific_objectives,\r\n                    budget: project.budget,\r\n                    state_project:project.state_project,\r\n                    phase:project.phase\r\n                },\r\n                { new: true });\r\n        },\r\n        \r\n        async deleteProject(_, args) {\r\n            return await Proyectos.findByIdAndDelete(args.id)\r\n        },\r\n\r\n\r\n    \r\n\r\n        /*Mutation Inscripciones */\r\n        async addInscription(_, { inscription }) {\r\n            const unaInscripcion = new Inscripciones(inscription);\r\n            return await unaInscripcion.save();\r\n        },\r\n\r\n        async updateStateInscriptions(_, { inscription }) {\r\n            return await Inscripciones.findByIdAndUpdate(inscription.id,\r\n                {\r\n                    state_inscription: inscription.state_inscription,\r\n                },\r\n                { new: true });\r\n        },\r\n\r\n        async deleteIncriptions(_, args) {\r\n            return await Inscripciones.findByIdAndDelete(args.id)\r\n        },\r\n\r\n        /*Mutation Avances */\r\n        async addProgress(_, { progress }) {\r\n            const unAvance = new Avances(progress);\r\n            return await unAvance.save();\r\n        },\r\n    }\r\n}\r\n\r\n\r\n\r\n"],"file":"resolvers.js"}